import os
from googleapiclient.discovery import build
import openai
if os.getenv("AWS_LAMBDA_FUNCTION_NAME"):
    from bot_lambda.config import OPENAI_API_KEY, YOUR_API_KEY as api_key, YOUR_SEARCH_ENGINE_ID as search_engine_id, DOMAINS as domains
else:
    from config import OPENAI_API_KEY, YOUR_API_KEY as api_key, YOUR_SEARCH_ENGINE_ID as search_engine_id, DOMAINS as domains

openai.api_key = OPENAI_API_KEY

def google_search(search_term, domain, api_key=api_key, search_engine_id=search_engine_id):
    service = build("customsearch", "v1", developerKey=api_key)
    result = service.cse().list(
        q=search_term,
        cx=search_engine_id,
        siteSearch=domain,
        siteSearchFilter="i",  # 'i' –æ–∑–Ω–∞—á–∞–µ—Ç "–≤–∫–ª—é—á–∏—Ç—å" —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–æ–º–µ–Ω
        num=10  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ 10
    ).execute()
    return result.get('items', [])

def check_snippet_with_openai(company, job_title, snippet, api_key=api_key):
    combined_prompt = [
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": f"Translate the following job title to Russian and English: '{job_title}'."},
        {"role": "assistant", "content": "Russian: '...'\nEnglish: '...'"},
        {"role": "user", "content": "Check if the following snippet mentions a job opening with the job title in any of the given languages (original, Russian, or English). Respond only with 'True' or 'False'.\n\nSnippet: ...\n"},
        {"role": "assistant", "content": "True"},
        {"role": "user", "content": "Check if the following snippet mentions a job opening with the job title in any of the given languages (original, Russian, or English). Respond only with 'True' or 'False'.\n\nSnippet: ...\n"},
        {"role": "assistant", "content": "False"},
        {"role": "user", "content": f"Check if the following snippet mentions a job opening for the company '{company}' with the job title '{job_title}' (original), the translated Russian job title, or the translated English job title. Respond only with 'True' or 'False'.\n\nSnippet: {snippet}\n"}
    ]

    response = openai.ChatCompletion.create(
        model="gpt-4-turbo",
        messages=combined_prompt,
        max_tokens=200
    )
    
    result = response.choices[0].message["content"].strip()
    return result

def filter_urls_by_domain(results, domains=domains):
    filtered_results = []
    for result in results:
        url = result.get('link', '')
        for domain in domains:
            if domain in url:
                filtered_results.append(result)
                break
    return filtered_results

def fetch_and_filter_results(company, job_title, domains=domains):
    results_ru = google_search(f"{company} {job_title}", ".ru")
    results_by = google_search(f"{company} {job_title}", ".by")

    all_results = results_ru + results_by
    filtered_results = filter_urls_by_domain(all_results)
    
    return filtered_results

def process_results(filtered_results, company, job_title, domains=domains):
    response_text = ""
    for result in filtered_results:
        snippet = result.get('snippet', 'No snippet available')
        is_relevant = check_snippet_with_openai(company, job_title, snippet)
        if is_relevant.lower() == 'true':
            response_text += f"Title: {result['title']}\nLink: {result['link']}\nSnippet: {snippet}\n---\n"
    return response_text

def nice_process_results(filtered_results, company, job_title, domains=domains):
    relevant_results = [
        result for result in filtered_results
        if check_snippet_with_openai(company, job_title, result.get('snippet', 'No snippet available')).lower() == 'true'
    ]

    if not relevant_results:
        return (
            "üü¢üü¢üü¢üü¢üü¢\n–û–∑–Ω–∞–∫ –∑–≤'—è–∑–∫—É –∑—ñ –∫—Ä–∞—ó–Ω–∞–º–∏-–≤–æ—Ä–æ–≥–∞–º–∏ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ.\n\n"
            "–©–æ–± –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É, –≤–≤–æ–¥—å—Ç–µ –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó –ø–æ–≤–Ω—ñ—Å—Ç—é, "
            "–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–µ Pin-Up, –∞ Pin-Up Global, –∞ –ø–æ–∑–∏—Ü—ñ—é –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ - –æ–ø–µ—Ä–∞—Ç–æ—Ä.\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /check \"Pin-Up Global\",\"–æ–ø–µ—Ä–∞—Ç–æ—Ä\""
        )

    risk_level = min(len(relevant_results), 5)
    risk_indicators = "üî¥" * risk_level + "üü¢" * (5 - risk_level)
    
    if risk_level == 1:
        risk_comment = "–¶—è –∫–æ–º–ø–∞–Ω—ñ—è —Ä–µ—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î –∑–≤'—è–∑–∫–∏ –∞–±–æ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø—ñ—Ç–∏ –∑ —Ç–æ–∫—Å–∏—á–Ω–æ—ó –∫—Ä–∞—ó–Ω–∏. –ù–∞—Å—Ç—ñ–π–Ω–æ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑–≤'—è–∑—É–≤–∞—Ç–∏—Å—è –∑ –Ω–µ—é –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏."
    elif risk_level == 2:
        risk_comment = "–¶—è –∫–æ–º–ø–∞–Ω—ñ—è –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ —Å–≤–æ—é —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å, –∞–ª–µ –Ω–µ –¥—É–∂–µ —É—Å–ø—ñ—à–Ω–æ. –£–Ω–∏–∫–∞–π—Ç–µ —Ü—é –∫–æ–º–ø–∞–Ω—ñ—é."
    elif risk_level == 3:
        risk_comment = "–¶—è –∫–æ–º–ø–∞–Ω—ñ—è –Ω–∞–≤—ñ—Ç—å –Ω–µ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å, –¥—É–∂–µ –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ, –Ω–µ –∑–≤'—è–∑—É–π—Ç–µ—Å—è –∑ –Ω–µ—é –±—É–¥—å-—è–∫–æ—é —Ü—ñ–Ω–æ—é."
    elif risk_level == 4:
        risk_comment = "–¶–µ —Ç–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å –∫–æ–º–ø–∞–Ω—ñ—è! –î—É–∂–µ –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ, –æ–±—Ö–æ–¥—å—Ç–µ —Å—Ç–æ—Ä–æ–Ω–æ—é!"
    else:
        risk_comment = "–¶–µ —Å—Ç–æ–≤—ñ–¥—Å–æ—Ç–∫–æ–≤–æ —Ç–æ–∫—Å–∏—á–Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—è, —É–Ω–∏–∫–∞–π—Ç–µ –±—É–¥—å-—è–∫–æ—é —Ü—ñ–Ω–æ—é!"

    return f"{risk_indicators}\n{risk_comment}"

def osint_process_result(processed_results):
    if not processed_results.strip():
        return "No relevant results found."

    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –¥–∞–Ω—ñ. –í–∏–≤–µ–¥—å —É (—à–∞–±–ª–æ–Ω—É):

(–ê–Ω–∞–ª—ñ–∑ –ø–æ–∫–∞–∑—É—î, —â–æ [–∫–æ–º–ø–∞–Ω—ñ—è] –∞–∫—Ç–∏–≤–Ω–æ —à—É–∫–∞—î [–ø–æ—Å–∞–¥–∞] —á–µ—Ä–µ–∑ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤–∞–∫–∞–Ω—Å—ñ–π —É [–∫—Ä–∞—ó–Ω–∞—Ö].
–û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –¥–æ–∫–∞–∑–∞–º–∏ —ó—Ö –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ –ø–æ –∑–∞–ª—É—á–µ–Ω–Ω—é —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤:
[–ø–æ—Å–∏–ª–∞–Ω–Ω—è —É mardown style]
)

–û—Å—å –¥–∞–Ω—ñ –¥–æ –∞–Ω–∞–ª—ñ–∑—É

{processed_results}


"""

    response = openai.ChatCompletion.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=300,
        n=1,
        stop=None,
        temperature=0.5,
    )

    return response['choices'][0]['message']['content']

